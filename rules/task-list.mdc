---
description: 
globs: 
alwaysApply: false
---
# Task List Management
Guidelines for creating and managing task lists in markdown files to track project progress

## Task List Creation
1. Create task lists in a markdown file (in the project root):
   * Use `TASKS.md` or a descriptive name relevant to the feature (e.g., `ASSISTANT_CHAT.md`)
   * Include a clear title and description of the feature being implemented
2. Structure the file with these sections:

```markdown
# Feature Name Implementation

Brief description of the feature and its purpose.

## Completed Tasks

- [x] Task 1 that has been completed
- [x] Task 2 that has been completed

## In Progress Tasks

- [ ] Task 3 currently being worked on
- [ ] Task 4 to be completed soon

## Future Tasks

- [ ] Task 5 planned for future implementation
- [ ] Task 6 planned for future implementation

## Implementation Plan

Detailed description of how the feature will be implemented.
```

## Task List Updates
1. Update task lists regularly to reflect current project status:
   * Mark completed tasks with [x] as soon as they're finished
   * Move tasks between sections as their status changes
   * Add new tasks as they are identified during development
2. Include dates when possible:
   * Add completion dates next to finished tasks: `- [x] Implement login system (completed 2023-10-15)`
   * Include target dates for planned tasks: `- [ ] Add user settings page (target: 2023-11-01)`

## Task Formatting
1. Write clear, actionable task descriptions:
   * Start with verbs (Implement, Create, Fix, Refactor, Test)
   * Be specific about what needs to be done
   * Include relevant context or constraints
2. Use nested tasks for complex items:
   ```markdown
   - [ ] Implement user authentication system
     - [ ] Create login form
     - [ ] Set up OAuth integration
     - [ ] Implement session management
   ```
3. Add priority indicators when helpful:
   * `[HIGH]`, `[MEDIUM]`, or `[LOW]` at the beginning of tasks
   * Or use emoji indicators: ðŸ”´ (high), ðŸŸ¡ (medium), ðŸŸ¢ (low)

## Integration with Workflow
1. Link tasks to related resources:
   * Include issue/ticket numbers: `- [ ] Fix login error (#123)`
   * Link to relevant documentation or specs: `- [ ] Implement API according to [spec](link/to/spec)`
2. Reference tasks in commit messages:
   * Use consistent prefixes: `"Task: Implement user login form"`
   * Mention task completion: `"Closes task: Add password reset"`
3. Use tasks during code reviews and standups:
   * Review task list before meetings to track progress
   * Update task list after discussions to capture new requirements

## Best Practices
1. Keep task granularity appropriate:
   * Tasks should typically represent 1-8 hours of work
   * Break down large tasks into smaller, manageable subtasks
2. Clean up periodically:
   * Archive completed tasks that are no longer relevant for context
   * Create a new task list when a feature is completed
3. Use consistent formatting across all project task lists
4. Include task owners for team projects:
   * `- [ ] Implement search functionality (@username)`
5. Review and groom task lists at least weekly to ensure they remain relevant